@page "/ai-assistant"
@using Microsoft.AspNetCore.Components.Forms
@* @inject HttpClient Http *@
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>AI Assistant</PageTitle>

<h3>Ask the AI Assistant</h3>

<!-- Main content in a single column layout -->
<div class="row">
    <div class="col-md-8">
        <!-- Input Form -->
        <div class="card">
            <div class="card-body">
                <EditForm Model="@_queryModel" OnSubmit="@HandleSubmit" FormName="aiForm">
                    <div class="mb-3">
                        <label for="query" class="form-label">What would you like to ask?</label>
                        <InputTextArea id="query" class="form-control" @bind-Value="_queryModel.Query" rows="3" />
                    </div>
                    <button type="submit" class="btn btn-primary" disabled="@_isLoading">
                        @if (_isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span> Processing...</span>
                        }
                        else
                        {
                            <span>Ask AI</span>
                        }
                    </button>
                </EditForm>
            </div>
        </div>

        <!-- AI Response -->
        @if (!string.IsNullOrEmpty(_response))
        {
            <div class="card mt-4">
                <div class="card-header">
                    <h5 class="mb-0">AI Response</h5>
                </div>
                <div class="card-body">
                    <p>@((MarkupString)_response)</p>
                </div>
            </div>

            <!-- Analysis Section - Now below the response -->
            @if (_showChart)
            {
                <div class="card mt-4">
                    <div class="card-header">
                        <h5 class="mb-0">Analysis</h5>
                    </div>
                    <div class="card-body chart-container">
                        <!-- Chart will be rendered here -->
                        <div id="chart-container"></div>
                    </div>
                </div>
            }
        }
    </div>
</div>
@code {
    private QueryModel _queryModel = new();
    private string _response = string.Empty;
    private bool _isLoading = false;
    private bool _showChart = false;

    private class QueryModel
    {
        public string Query { get; set; } = string.Empty;
    }

    
    private async Task HandleSubmit()
    {

        if (string.IsNullOrWhiteSpace(_queryModel.Query))
            return;

        _isLoading = true;
        _response = string.Empty;
        _showChart = false;

        try
        {
            var deployment = "backpack-gpt-4o-mini"; // or read from config
            // Set up request API,  BassAddress + relative URI
            var request = new HttpRequestMessage(HttpMethod.Post,
                $"/openai/deployments/{deployment}/chat/completions?api-version=2025-01-01-preview");


            var requestBody = new
            {
                messages = new[]
                {
                    new { role = "system", content =
                        @"You are a helpful assistant with access to the following product data:

                        Columns:
                        - brand (string)
                        - price (decimal)
                        - weight_capacity_kg (float)
                        - waterproof (true/false)
                        - size (string)
                        - color (string)
                        - style (string)
                        - compartments (int)

                        Respond to user questions using the data structure above. If possible, use tables, bullet points, or concise lists in your answers.
                        Please avoid markdown tables. Use bullet points or concise sentences."
                        

                    },
                    new { role = "user", content = _queryModel.Query }
                },
                max_tokens = 800,
                temperature = 0.5
            };

            request.Content = new StringContent(
                System.Text.Json.JsonSerializer.Serialize(requestBody),
                System.Text.Encoding.UTF8,
                "application/json");
            
            // Instanciate   AzureOpenAI obj with  "AzureOpenAI" defined in the Project.cs
            var client = HttpClientFactory.CreateClient("AzureOpenAI");
            var response = await client.SendAsync(request);
            var content = await response.Content.ReadAsStringAsync();
            
            // For debug
            // Console.WriteLine("Request URI: " + request.RequestUri);
            // Console.WriteLine("BaseAddress: " + client.BaseAddress);
            // Console.WriteLine("Azure OpenAI Response: " + content);


            if (!response.IsSuccessStatusCode)
            {
                _response = $"API Error: {response.StatusCode}\n{content}";
            }
            else
            {
                var json = System.Text.Json.JsonDocument.Parse(content);
                _response = json.RootElement
                    .GetProperty("choices")[0]
                    .GetProperty("message")
                    .GetProperty("content")
                    .GetString();

                // 表示切り替え
                _showChart = _response.Contains("chart", StringComparison.OrdinalIgnoreCase);

                // JSチャート描画呼び出し
                if (_showChart)
                    await JSRuntime.InvokeVoidAsync("renderChart");
            }
        }
        catch (Exception ex)
        {
            _response = $"Error: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    

    
    //end of code
}　